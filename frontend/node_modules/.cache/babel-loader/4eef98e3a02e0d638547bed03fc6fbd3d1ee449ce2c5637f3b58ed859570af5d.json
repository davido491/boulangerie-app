{"ast":null,"code":"import * as brain from 'brain.js';\n\n// Configuration du réseau neuronal\nconst net = new brain.NeuralNetwork({\n  hiddenLayers: [3],\n  // Nombre de neurones dans la couche cachée\n  activation: 'sigmoid' // Fonction d'activation\n});\n\n// Données d'entraînement\nconst trainingData = [{\n  input: [0, 0],\n  output: [0]\n}, {\n  input: [0, 1],\n  output: [1]\n}, {\n  input: [1, 0],\n  output: [1]\n}, {\n  input: [1, 1],\n  output: [0]\n}];\n\n// Fonction pour entraîner le réseau avec débogage\nfunction trainNetworkWithDebug() {\n  console.log('Début de l\\'entraînement...');\n  const results = net.train(trainingData, {\n    iterations: 20000,\n    errorThresh: 0.005,\n    log: true,\n    logPeriod: 100,\n    callback: stats => {\n      console.log(`Itération: ${stats.iterations}, Erreur: ${stats.error}`);\n    }\n  });\n  console.log('Entraînement terminé:', results);\n  console.log('Structure finale du réseau:', net.toJSON());\n}\n\n// Fonction pour tester le réseau\nfunction testNetwork() {\n  console.log('Tests du réseau:');\n  trainingData.forEach(data => {\n    const output = net.run(data.input);\n    console.log(`Entrée: [${data.input}], Sortie attendue: ${data.output}, Sortie réelle: ${output}`);\n  });\n}\n\n// Fonction pour prédire avec débogage\nfunction predictWithDebug(input) {\n  console.log(`Prédiction pour l'entrée: [${input}]`);\n  const output = net.run(input);\n  console.log(`Sortie: ${output}`);\n  return output;\n}\n\n// Fonction principale de débogage\nfunction debugBrainJS() {\n  console.log('Démarrage du débogage Brain.js');\n\n  // Entraînement du réseau\n  trainNetworkWithDebug();\n\n  // Test du réseau\n  testNetwork();\n\n  // Exemple de prédiction\n  predictWithDebug([1, 1]);\n}\n\n// Exporter les fonctions et le réseau pour utilisation dans d'autres parties de l'application\nexport default {\n  net,\n  debugBrainJS,\n  predictWithDebug\n};","map":{"version":3,"names":["brain","net","NeuralNetwork","hiddenLayers","activation","trainingData","input","output","trainNetworkWithDebug","console","log","results","train","iterations","errorThresh","logPeriod","callback","stats","error","toJSON","testNetwork","forEach","data","run","predictWithDebug","debugBrainJS"],"sources":["C:/Users/sebas/boulangerie-app/frontend/src/brain.js"],"sourcesContent":["import * as brain from 'brain.js';\r\n\r\n// Configuration du réseau neuronal\r\nconst net = new brain.NeuralNetwork({\r\n  hiddenLayers: [3], // Nombre de neurones dans la couche cachée\r\n  activation: 'sigmoid', // Fonction d'activation\r\n});\r\n\r\n// Données d'entraînement\r\nconst trainingData = [\r\n  { input: [0, 0], output: [0] },\r\n  { input: [0, 1], output: [1] },\r\n  { input: [1, 0], output: [1] },\r\n  { input: [1, 1], output: [0] }\r\n];\r\n\r\n// Fonction pour entraîner le réseau avec débogage\r\nfunction trainNetworkWithDebug() {\r\n  console.log('Début de l\\'entraînement...');\r\n  \r\n  const results = net.train(trainingData, {\r\n    iterations: 20000,\r\n    errorThresh: 0.005,\r\n    log: true,\r\n    logPeriod: 100,\r\n    callback: (stats) => {\r\n      console.log(`Itération: ${stats.iterations}, Erreur: ${stats.error}`);\r\n    }\r\n  });\r\n\r\n  console.log('Entraînement terminé:', results);\r\n  console.log('Structure finale du réseau:', net.toJSON());\r\n}\r\n\r\n// Fonction pour tester le réseau\r\nfunction testNetwork() {\r\n  console.log('Tests du réseau:');\r\n  trainingData.forEach(data => {\r\n    const output = net.run(data.input);\r\n    console.log(`Entrée: [${data.input}], Sortie attendue: ${data.output}, Sortie réelle: ${output}`);\r\n  });\r\n}\r\n\r\n// Fonction pour prédire avec débogage\r\nfunction predictWithDebug(input) {\r\n  console.log(`Prédiction pour l'entrée: [${input}]`);\r\n  const output = net.run(input);\r\n  console.log(`Sortie: ${output}`);\r\n  return output;\r\n}\r\n\r\n// Fonction principale de débogage\r\nfunction debugBrainJS() {\r\n  console.log('Démarrage du débogage Brain.js');\r\n  \r\n  // Entraînement du réseau\r\n  trainNetworkWithDebug();\r\n  \r\n  // Test du réseau\r\n  testNetwork();\r\n  \r\n  // Exemple de prédiction\r\n  predictWithDebug([1, 1]);\r\n}\r\n\r\n// Exporter les fonctions et le réseau pour utilisation dans d'autres parties de l'application\r\nexport default {\r\n  net,\r\n  debugBrainJS,\r\n  predictWithDebug\r\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,UAAU;;AAEjC;AACA,MAAMC,GAAG,GAAG,IAAID,KAAK,CAACE,aAAa,CAAC;EAClCC,YAAY,EAAE,CAAC,CAAC,CAAC;EAAE;EACnBC,UAAU,EAAE,SAAS,CAAE;AACzB,CAAC,CAAC;;AAEF;AACA,MAAMC,YAAY,GAAG,CACnB;EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC;AAAE,CAAC,EAC9B;EAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC;AAAE,CAAC,EAC9B;EAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC;AAAE,CAAC,EAC9B;EAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC;AAAE,CAAC,CAC/B;;AAED;AACA,SAASC,qBAAqBA,CAAA,EAAG;EAC/BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAE1C,MAAMC,OAAO,GAAGV,GAAG,CAACW,KAAK,CAACP,YAAY,EAAE;IACtCQ,UAAU,EAAE,KAAK;IACjBC,WAAW,EAAE,KAAK;IAClBJ,GAAG,EAAE,IAAI;IACTK,SAAS,EAAE,GAAG;IACdC,QAAQ,EAAGC,KAAK,IAAK;MACnBR,OAAO,CAACC,GAAG,CAAC,cAAcO,KAAK,CAACJ,UAAU,aAAaI,KAAK,CAACC,KAAK,EAAE,CAAC;IACvE;EACF,CAAC,CAAC;EAEFT,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,OAAO,CAAC;EAC7CF,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAET,GAAG,CAACkB,MAAM,CAAC,CAAC,CAAC;AAC1D;;AAEA;AACA,SAASC,WAAWA,CAAA,EAAG;EACrBX,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/BL,YAAY,CAACgB,OAAO,CAACC,IAAI,IAAI;IAC3B,MAAMf,MAAM,GAAGN,GAAG,CAACsB,GAAG,CAACD,IAAI,CAAChB,KAAK,CAAC;IAClCG,OAAO,CAACC,GAAG,CAAC,YAAYY,IAAI,CAAChB,KAAK,uBAAuBgB,IAAI,CAACf,MAAM,oBAAoBA,MAAM,EAAE,CAAC;EACnG,CAAC,CAAC;AACJ;;AAEA;AACA,SAASiB,gBAAgBA,CAAClB,KAAK,EAAE;EAC/BG,OAAO,CAACC,GAAG,CAAC,8BAA8BJ,KAAK,GAAG,CAAC;EACnD,MAAMC,MAAM,GAAGN,GAAG,CAACsB,GAAG,CAACjB,KAAK,CAAC;EAC7BG,OAAO,CAACC,GAAG,CAAC,WAAWH,MAAM,EAAE,CAAC;EAChC,OAAOA,MAAM;AACf;;AAEA;AACA,SAASkB,YAAYA,CAAA,EAAG;EACtBhB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;EAE7C;EACAF,qBAAqB,CAAC,CAAC;;EAEvB;EACAY,WAAW,CAAC,CAAC;;EAEb;EACAI,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1B;;AAEA;AACA,eAAe;EACbvB,GAAG;EACHwB,YAAY;EACZD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}